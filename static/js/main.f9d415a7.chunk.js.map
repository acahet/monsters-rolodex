{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","monster","className","src","id","alt","name","email","CardList","monsters","map","SearchBox","placeholder","onChange","type","App","state","searchField","handleChange","e","setState","target","value","fetch","then","response","json","data","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAYeA,G,MAVF,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACf,OACC,sBAAKC,UAAU,iBAAf,UACC,qBAAKC,IAAG,+BAA0BF,EAAQG,GAAlC,aAAiDC,IAAKJ,EAAQK,OACtE,6BAAKL,EAAQK,OACb,4BAAIL,EAAQM,aCMAC,G,MAVE,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACnB,OACC,qBAAKP,UAAU,YAAf,SACEO,EAASC,KAAI,SAACT,GAAD,OACb,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQG,WCDRO,G,YAJG,SAAC,GAA+B,IAA7BC,EAA4B,EAA5BA,YAAaC,EAAe,EAAfA,SACjC,OAAO,uBAAOX,UAAU,SAASY,KAAK,SAASF,YAAaA,EAAaC,SAAUA,MCiCrEE,E,4MA9BdC,MAAQ,CACPP,SAAU,GACVQ,YAAa,I,EAUdC,aAAe,SAACC,GACf,EAAKC,SAAS,CAAEH,YAAaE,EAAEE,OAAOC,S,kEATlB,IAAD,OACnBC,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACN,EAAKP,SAAS,CAAEX,SAAUkB,S,+BAOnB,IAAD,EAC0BC,KAAKZ,MAA/BP,EADA,EACAA,SAAUQ,EADV,EACUA,YACZY,EAAmBpB,EAASqB,QAAO,SAAC7B,GAAD,OACxCA,EAAQK,KAAKyB,cAAcC,SAASf,EAAYc,kBAEjD,OACC,sBAAK7B,UAAU,MAAf,UACC,kDACA,cAAC,EAAD,CAAWU,YAAY,kBAAkBC,SAAUe,KAAKV,eACxD,cAAC,EAAD,CAAUT,SAAUoB,W,GAzBNI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f9d415a7.chunk.js","sourcesContent":["import React from 'react';\nimport './card.styles.css';\nconst Card = ({ monster }) => {\n\treturn (\n\t\t<div className=\"card-container\">\n\t\t\t<img src={`https://robohash.org/${monster.id}?set=set2`} alt={monster.name} />\n\t\t\t<h1>{monster.name}</h1>\n\t\t\t<p>{monster.email}</p>\n\t\t</div>\n\t);\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from '../card/card.component';\nimport './card-list.styles.css';\nconst CardList = ({ monsters }) => {\n\treturn (\n\t\t<div className=\"card-list\">\n\t\t\t{monsters.map((monster) => (\n\t\t\t\t<Card key={monster.id} monster={monster} />\n\t\t\t))}\n\t\t</div>\n\t);\n};\n\nexport default CardList;\n","import React from 'react';\nimport './search-box.styles.css';\nconst SearchBox = ({ placeholder, onChange }) => {\n\treturn <input className=\"search\" type=\"search\" placeholder={placeholder} onChange={onChange} />;\n};\n\nexport default SearchBox;\n","import React, { Component } from 'react';\nimport CardList from './components/card-list/card-list.component';\nimport './App.css';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends Component {\n\tstate = {\n\t\tmonsters: [],\n\t\tsearchField: '',\n\t};\n\tcomponentDidMount() {\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tthis.setState({ monsters: data });\n\t\t\t});\n\t}\n\n\thandleChange = (e) => {\n\t\tthis.setState({ searchField: e.target.value });\n\t};\n\trender() {\n\t\tconst { monsters, searchField } = this.state;\n\t\tconst filteredMonsters = monsters.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(searchField.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monsters Rolodex</h1>\n\t\t\t\t<SearchBox placeholder=\"Search Monsters\" onChange={this.handleChange} />\n\t\t\t\t<CardList monsters={filteredMonsters} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}